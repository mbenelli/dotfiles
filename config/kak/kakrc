set-option global ui_options ncurses_assistant=none
set-option global disabled_hooks .*-highlight
set-option global indentwidth 4

# kak-lsp

eval %sh{kak-lsp --kakoune -s $kak_session}

hook global WinSetOption filetype=(rust|c|cpp) %{
	lsp-enable-window
}


# c

hook global BufSetOption filetype=c %{
        set-option buffer formatcmd 'indent'
}

hook global WinSetOption filetype=c %{
    set-option window lintcmd "cppcheck --language=c --enable=warning,style,information --template='{file}:{line}:{column}: {severity}: {message}' --suppress='*:*.h' 2>&1"
}

# c++

hook global BufSetOption filetype=cpp %{
        set-option buffer indentwidth 2
        set-option buffer formatcmd 'clang-format'
        map buffer insert <tab> '<a-;><a-gt>'
        map buffer insert <s-tab> '<a-;><a-lt>'
}

hook global WinSetOption filetype=cpp %{
    set-option window lintcmd "cppcheck --language=c++ --enable=warning,style,information --template='{file}:{line}:{column}: {severity}: {message}' --suppress='*:*.h' --suppress='*:*.hh' 2>&1"
}

# scala

hook global WinSetOption filetype=scala %{
    set-option window indentwidth 2
    set-option buffer formatcmd 'scalafmt --stdin --stdout'
}

# plug.kak

evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak" config %{
  map global normal <c-p> ': fzf-mode<ret>'
}

# Clipboard

# hook global RegisterModified '"' %{ nop %sh{
#     if [ -n "$DISPLAY" ]; then
#         printf %s "$kak_main_reg_dquote" | pbcopy
#     elif [ -n "$TMUX" ]; then
#         tmux set-buffer -- "$kak_main_reg_dquote"
#         fi
# }}

